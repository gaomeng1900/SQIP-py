
/*
@author Meng G. <gaomeng1900@gmail.com>
@date 2016-03-21
@github https://github.com/gaomeng1900/centralperk

Support ADM/commonJS/global
 */
(function(global, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    return module.exports = factory();
  } else {
    if (typeof define === 'function' && define.amd) {
      return define(['PERK'], factory);
    } else {
      return global.PERK = factory();
    }
  }
})(this, function() {
  var PERK, Requests, SOFA;
  if (typeof define === 'function' && define.amd) {
    Requests = require('requests');
  }
  SOFA = {
    $$funMap: {},
    links: {}
  };
  PERK = {
    sign: function(taskID, fun) {
      SOFA.$$funMap[taskID] = fun;
    },
    link: function(root) {
      var stream;
      stream = [root];
      SOFA.links[root] = {};
      return {
        stream: stream,
        to: function(branch, leaf) {
          return PERK.linker.call(this, branch, leaf);
        }
      };
    },
    linker: function(branch, leaf) {
      var _l, i, j, k, len, len1, ref, root, stream;
      root = SOFA.links[this.stream[0]];
      if (leaf) {
        if (!PERK._isArray(leaf)) {
          leaf = [leaf];
        }
        for (j = 0, len = leaf.length; j < len; j++) {
          _l = leaf[j];
          root[_l] = {};
        }
      }
      ref = this.stream;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        if (i !== this.stream[0]) {
          root = root[i];
        }
      }
      root[branch] = {};
      stream = this.stream.concat(branch);
      return {
        stream: stream,
        to: function(branch, leaf) {
          return PERK.linker.call(this, branch, leaf);
        }
      };
    },
    task: function(taskName, args) {
      return SOFA.$$funMap[taskName](args, function(args) {
        return PERK.next(taskName, [taskName], args);
      });
    },
    next: function(taskName, stream, args) {
      var i, j, len, new_stream, next_step, root;
      root = SOFA.links[stream[0]];
      if (root === void 0) {
        console.log('no follwers');
        return;
      }
      for (j = 0, len = stream.length; j < len; j++) {
        i = stream[j];
        if (i !== stream[0]) {
          root = root[i];
        }
      }
      for (next_step in root) {
        console.log(taskName, '->', next_step);
        if (stream.slice(-1)[0] === next_step) {
          console.error(stream, '->', next_step);
          throw new Error('Dead loop!!! please check your flow');
          return;
        }
        new_stream = function() {
          return stream.concat(next_step);
        };
        SOFA.$$funMap[next_step](args, function(args) {
          return PERK.next(next_step, new_stream(), args);
        });
      }
    },
    stream: function(flow) {
      var results, root;
      console.log(flow);
      results = [];
      for (root in flow) {
        console.log(root);
        results.push(SOFA.links[root] = flow[root]);
      }
      return results;
    },
    get: function(opt, args, done) {
      return PERK._HTTP('get', opt, args, done);
    },
    post: function(opt, args, done) {
      return PERK._HTTP('post', opt, args, done);
    },
    put: function(opt, args, done) {
      return PERK._HTTP('put', opt, args, done);
    },
    "delete": function(opt, args, done) {
      return PERK._HTTP('delete', opt, args, done);
    },
    _HTTP: function(method, opt, args, done) {
      if ((PERK._isArray(args)) || !args[0]) {
        console.warn('ARGS FOOR HTTP should be a Object or Map, OR THE RESULT MAY BE MASSED UP!!');
      }
      if (opt.load_arg) {
        console.warn('OU SHOULDNT PASS CALLBACK_ARGS HERE, NOT HERE, it will be COVERED by args');
      }
      opt.load_arg = args;
      if (opt.load) {
        console.warn('YOU SHOULDNT PASS A LOAD FUNCTION HERE, it will be COVERED by the to(fun)');
      }
      opt.load = done;
      if (!opt.error) {
        opt.error = done;
      }
      return new Requests(opt)[method]();
    },
    _isArray: function(o) {
      return Object.prototype.toString.call(o) === '[object Array]';
    }
  };
  return PERK;
});

//# sourceMappingURL=data:application/json;base64,
